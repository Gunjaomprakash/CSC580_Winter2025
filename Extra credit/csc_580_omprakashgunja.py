# -*- coding: utf-8 -*-
"""CSC_580_OmprakashGunja

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rqyu2L89rdmGFP5Q7O1C1lGbkSwO6ie2

CSC 580 AI2 Extra Credit

Name : Omprakash
ID: 2131025
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds

from tensorflow.keras import layers

(train_ds, val_ds, test_ds), metadata = tfds.load(
    'citrus_leaves',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    with_info=True,
    as_supervised=True,
)

num_classes = metadata.features['label'].num_classes
print(num_classes)

get_label_name = metadata.features['label'].int2str

image, label = next(iter(train_ds))
_ = plt.imshow(image)
_ = plt.title(get_label_name(label))

"""#Resize"""

IMG_SIZE = 180

resize_and_rescale = tf.keras.Sequential([
  layers.Resizing(IMG_SIZE, IMG_SIZE),
  layers.Rescaling(1./255)])

result = resize_and_rescale(image)
_ = plt.imshow(result)

print("Min and max pixel values:", result.numpy().min(), result.numpy().max())

"""# Data Augmentation using Tensorflow layers"""

data_augmentation = tf.keras.Sequential([
    layers.RandomFlip("horizontal_and_vertical"),
    layers.RandomRotation(0.2),
    layers.RandomZoom(0.2),
])

batch_size = 32
AUTOTUNE = tf.data.AUTOTUNE

def prepare(ds, shuffle=False, augment=False):
  # Resize and rescale all datasets.
  ds = ds.map(lambda x, y: (resize_and_rescale(x), y),
              num_parallel_calls=AUTOTUNE)

  if shuffle:
    ds = ds.shuffle(1000)

  # Batch all datasets.
  ds = ds.batch(batch_size)

  # Use data augmentation only on the training set.
  if augment:
    ds = ds.map(lambda x, y: (data_augmentation(x, training=True), y),
                num_parallel_calls=AUTOTUNE)

  # Use buffered prefetching on all datasets.
  return ds.prefetch(buffer_size=AUTOTUNE)

train_ds = prepare(train_ds, shuffle=True, augment=True)
val_ds = prepare(val_ds)
test_ds_noAug = prepare(test_ds)
test_ds_aug = prepare(test_ds, augment=True)

"""# Train model"""

model = tf.keras.Sequential([
  layers.Conv2D(16, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(32, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Conv2D(64, 3, padding='same', activation='relu'),
  layers.MaxPooling2D(),
  layers.Flatten(),
  layers.Dense(128, activation='relu'),
  layers.Dense(num_classes)
])

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

epochs=5
history = model.fit(
  train_ds,
  validation_data=val_ds,
  epochs=epochs
)

loss, acc = model.evaluate(test_ds_noAug)
print("Accuracy", acc)

loss, acc = model.evaluate(test_ds_aug)
print("Accuracy", acc)

"""In summary, the similar accuracy suggests that the model is robust and that the augmentations didnâ€™t distort the images enough to mislead the classifier.it means the model can handle natural variations well.

# Augmentation using GAN
"""

import tensorflow as tf
import tensorflow_datasets as tfds
from tensorflow.keras import layers
import matplotlib.pyplot as plt

(train_dsgan, val_dsgan, test_dsgan), metadata = tfds.load(
    'citrus_leaves',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    with_info=True,
    as_supervised=True,
)

img_height = 56
img_width = 56
BATCH_SIZE = 32
BUFFER_SIZE = 6000
noise_dim = 100

def preprocess_image(image, label):
    # Resize image to the chosen dimensions.
    image = tf.image.resize(image, [img_height, img_width])
    # Convert image to float32 and normalize from [0, 255] to [-1, 1]
    image = tf.cast(image, tf.float32)
    image = (image - 127.5) / 127.5
    return image

train_ds = train_dsgan.map(preprocess_image).shuffle(BUFFER_SIZE).batch(batch_size)

def make_generator_model():
    model = tf.keras.Sequential()
    # Project and reshape: adjust the dense layer to produce a feature map for 7x7
    model.add(layers.Dense(7 * 7 * 256, use_bias=False, input_shape=(noise_dim,)))
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    model.add(layers.Reshape((7, 7, 256)))  # Now shape is (7,7,256)

    # Upsample to 14x14
    model.add(layers.Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same', use_bias=False))
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    # Upsample to 28x28
    model.add(layers.Conv2DTranspose(64, (4, 4), strides=(2, 2), padding='same', use_bias=False))
    model.add(layers.BatchNormalization())
    model.add(layers.LeakyReLU())

    # Upsample to 56x56
    model.add(layers.Conv2DTranspose(3, (4, 4), strides=(2, 2), padding='same', use_bias=False, activation='tanh'))

    return model

def make_discriminator_model():
    model = tf.keras.Sequential()
    # Set input_shape to (56, 56, 3)
    model.add(layers.Conv2D(64, (4, 4), strides=(2, 2), padding='same',
                            input_shape=[img_height, img_width, 3]))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Conv2D(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(layers.LeakyReLU())
    model.add(layers.Dropout(0.3))

    model.add(layers.Flatten())
    model.add(layers.Dense(1))

    return model

generator = make_generator_model()
discriminator = make_discriminator_model()

noise = tf.random.normal([1, 100])
generated_image = generator(noise, training=False)

plt.imshow(generated_image[0, :, :, 0], cmap='gray')

discriminator = make_discriminator_model()
decision = discriminator(generated_image)
print (decision)

cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)

def discriminator_loss(real_output, fake_output):
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss
    return total_loss

def generator_loss(fake_output):
    return cross_entropy(tf.ones_like(fake_output), fake_output)

generator_optimizer = tf.keras.optimizers.Adam(1e-4)
discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)

checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)

EPOCHS = 100
noise_dim = 100
num_examples_to_generate = 16

# You will reuse this seed overtime (so it's easier)
# to visualize progress in the animated GIF)
seed = tf.random.normal([num_examples_to_generate, noise_dim])

@tf.function
def train_step(images):
    noise = tf.random.normal([BATCH_SIZE, noise_dim])

    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
      generated_images = generator(noise, training=True)

      real_output = discriminator(images, training=True)
      fake_output = discriminator(generated_images, training=True)

      gen_loss = generator_loss(fake_output)
      disc_loss = discriminator_loss(real_output, fake_output)

    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)

    generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))

def generate_and_save_images(model, epoch, test_input):
  # Notice `training` is set to False.
  # This is so all layers run in inference mode (batchnorm).
  predictions = model(test_input, training=False)

  fig = plt.figure(figsize=(4, 4))

  for i in range(predictions.shape[0]):
      plt.subplot(4, 4, i+1)
      plt.imshow(predictions[i, :, :, 0] * 127.5 + 127.5, cmap='gray')
      plt.axis('off')

  plt.savefig('image_at_epoch_{:04d}.png'.format(epoch))
  plt.show()

# generator = make_generator_model()
# discriminator = make_discriminator_model()
# generator_optimizer = tf.keras.optimizers.Adam(1e-4)
# discriminator_optimizer = tf.keras.optimizers.Adam(1e-4)

from IPython.display import display # Import the clear_output function
from IPython.display import clear_output
import time
import os
def train(dataset, epochs):
  for epoch in range(epochs):
    start = time.time()

    for image_batch in dataset:
      train_step(image_batch)

    # Produce images for the GIF as you go
    clear_output(wait=True)
    generate_and_save_images(generator,
                             epoch + 1,
                             seed)

    # Save the model every 15 epochs
    if (epoch + 1) % 15 == 0:
      checkpoint.save(file_prefix = checkpoint_prefix)

    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))

  # Generate after the final epoch
  clear_output(wait=True)
  generate_and_save_images(generator,
                           epochs,
                           seed)

train(train_ds, EPOCHS )

checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))

import glob
import imageio
import matplotlib.pyplot as plt
import numpy as np
import os
import PIL
from tensorflow.keras import layers
import time

from IPython import display

# Display a single image using the epoch number
def display_image(epoch_no):
  return PIL.Image.open('image_at_epoch_{:04d}.png'.format(epoch_no))

display_image(EPOCHS)

anim_file = 'dcgan.gif'

with imageio.get_writer(anim_file, mode='I') as writer:
  filenames = glob.glob('image*.png')
  filenames = sorted(filenames)
  for filename in filenames:
    image = imageio.imread(filename)
    writer.append_data(image)
  image = imageio.imread(filename)
  writer.append_data(image)

import tensorflow_docs.vis.embed as embed
embed.embed_file(anim_file)

import os
import shutil

# Define the destination folder
dest_folder = "generated_images"

# Create the destination folder if it doesn't exist
if not os.path.exists(dest_folder):
    os.makedirs(dest_folder)

# List all files in the current directory
for filename in os.listdir("."):
    # Check if the filename matches the expected pattern
    if filename.startswith("image_at_epoch_") and filename.endswith(".png"):
        source_path = os.path.join(".", filename)
        dest_path = os.path.join(dest_folder, filename)
        shutil.move(source_path, dest_path)
        print(f"Moved {filename} to {dest_folder}")

"""# Adding images to training dataset"""

import tensorflow as tf
import tensorflow_datasets as tfds
import pathlib
import matplotlib.pyplot as plt

# === Configuration ===
IMG_HEIGHT = 180
IMG_WIDTH = 180
BATCH_SIZE = 32

# === 1. Load the Original Dataset from tfds ===
(train_ds_orig, val_ds_orig, test_ds_orig), ds_info = tfds.load(
    'citrus_leaves',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    with_info=True,
    as_supervised=True
)

# Preprocessing function: resize and normalize to [-1,1]
def preprocess_image(image, label):
    image = tf.image.resize(image, [IMG_HEIGHT, IMG_WIDTH])
    image = tf.cast(image, tf.float32)
    image = (image - 127.5) / 127.5  # Normalize to [-1, 1]
    return image, label

train_ds_orig = train_ds_orig.map(preprocess_image)
val_ds_orig   = val_ds_orig.map(preprocess_image)
test_ds_orig  = test_ds_orig.map(preprocess_image)

# --- Wrap labels so they are no longer scalars ---
def wrap_label(image, label):
    # Expand dims so that label shape becomes (1,) instead of scalar.
    label = tf.expand_dims(label, axis=-1)
    return image, label

train_ds_orig = train_ds_orig.map(wrap_label)
val_ds_orig   = val_ds_orig.map(wrap_label)
test_ds_orig  = test_ds_orig.map(wrap_label)

# Batch original datasets (if not already batched)
train_ds_orig = train_ds_orig.batch(BATCH_SIZE)
val_ds_orig = val_ds_orig.batch(BATCH_SIZE)
test_ds_orig = test_ds_orig.batch(BATCH_SIZE)

# === 2. Load the Generated Images Dataset ===
# Assume generated images are in a folder "generated_images" in the current directory.
generated_images_dir = pathlib.Path("generated_images")

generated_ds = tf.keras.preprocessing.image_dataset_from_directory(
    directory=str(generated_images_dir),
    labels=None,             # No labels in the folder
    color_mode='grayscale',  # Generated images are grayscale
    image_size=(IMG_HEIGHT, IMG_WIDTH),
    batch_size=BATCH_SIZE,
    shuffle=False
)

# Assign a default label (for instance, label 0) to the generated images.
generated_ds = generated_ds.map(lambda x: (x, tf.zeros(tf.shape(x)[0], dtype=tf.int64)))

# Since the original data is RGB, convert grayscale generated images to RGB.
def convert_to_rgb(image, label):
    image = tf.image.grayscale_to_rgb(image)
    return image, label

generated_ds = generated_ds.map(convert_to_rgb)

# Normalize generated images to [-1,1]
def normalize_generated(image, label):
    image = tf.cast(image, tf.float32)
    image = (image - 127.5) / 127.5
    return image, label

generated_ds = generated_ds.map(normalize_generated)

# Wrap labels for generated dataset as well
generated_ds = generated_ds.map(wrap_label)


train_ds_unbatched = train_ds_orig.unbatch()
generated_ds_unbatched = generated_ds.unbatch()

# Concatenate the unbatched datasets.
combined_ds = train_ds_unbatched.concatenate(generated_ds_unbatched)

# Shuffle and re-batch the combined dataset.
augmented_train_ds = combined_ds.shuffle(1000, seed=42).batch(BATCH_SIZE)

combined_card = augmented_train_ds.cardinality().numpy()  # number of batches
print("Number of batches in augmented_train_ds:", combined_card)


# === 5. Verify by Displaying a Batch ===
for images, labels in augmented_train_ds.take(1):
    print("Batch images shape:", images.shape)  # Expect: (BATCH_SIZE, IMG_HEIGHT, IMG_WIDTH, 3)
    print("Batch labels shape:", labels.shape)    # Expect: (BATCH_SIZE, 1)
    # Display the first image in the batch (rescale from [-1,1] to [0,255])
    plt.imshow(((images[0] + 1) * 127.5).numpy().astype("uint8"))
    plt.title("Example Augmented Image")
    plt.axis("off")
    plt.show()

import tensorflow as tf

# Assume ds_info is already defined from tfds.load, and holds label info.
num_classes = ds_info.features['label'].num_classes
print("Number of classes:", num_classes)

# Build a simple CNN classifier.
model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(IMG_HEIGHT, IMG_WIDTH, 3)),
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu', padding='same'),
    tf.keras.layers.MaxPooling2D(),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

model.summary()

# Compile the model.
model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(),  # Labels are provided as integers.
    metrics=['accuracy']
)

# Set number of training epochs.
EPOCHS = 10

# Train the model using augmented_train_ds for training and val_ds_orig for validation.
history = model.fit(
    augmented_train_ds,
    validation_data=val_ds_orig,  # Make sure validation set is batched.
    epochs=EPOCHS
)

# Optionally, evaluate on the test set.
test_loss, test_accuracy = model.evaluate(test_ds_orig)
print("Test Loss:", test_loss)
print("Test Accuracy:", test_accuracy)